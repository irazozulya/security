using System;
using System.Collections.Generic;
using System.Security.Cryptography;
using System.Text;

namespace PhoneNumbers
{
	public static class PhoneNumbersManager
	{

		private static readonly Dictionary<string, string> _phoneNumbers = new Dictionary<string, string>
		{
			{ "58E60F3262BFF0E1E1B264A21911168FB0CE51E420D8B292E8E83FB7AF78BECD", "AB841FDEEAC243F0DF1B" }, //0639311110 ADMIN@GMAIL.COM
			{ "76BADD7B22072FC73CFB632B681132AB0CEE7C0FD5AD558ACD13D043AAF2A761", "AB841FDEEAC243F0DF1A" }, //0639311111 LENNY@GMAIL.COM
			{ "AF8061F464FF0BFD1CE1859819232D55C364E6E0EC58B1FD2EDB45D60826F26C", "AB841FDEEAC243F0DF19" }, //0639311112 IRYNA@GMAIL.COM
			{ "1D081C36F4B83E54D306963CDDAF6CB3FA123F508A5E66307A9712B8D67A3E4E", "AB841FDEEAC243F0DF18" }, //0639311113 DAVID@GMAIL.COM
			{ "FBFEB5675184C5A3FB45ABC4EDCEBF4F825929D44D740B5465FBBBE1430D9476", "AB841FDEEAC243F0DF1F" }, //0639311114 DMYTRO@GMAIL.COM
			{ "ECB7AA8A0498C37C74DDD41B0EBD268CA28C6272CB2D8D31E03633000B9E0A33", "AB841FDEEAC243F0DF1E" }, //0639311115 OLEGSANDR@GMAIL.COM
			{ "E6952498008988BC8BE407ABF8536D1E01CCEFA1B55AF6DD1FF339BE5BDA5196", "AB841FDEEAC243F0DF1D" }, //0639311116 ZOZULIA@GMAIL.COM
			{ "651CF4E4DB18F74C2F2005A8E07E18035AC7EBDD374F877BB3A16CDA8115DB3F", "AB841FDEEAC243F0DF1C" }, //0639311117 UKRAINE@GMAIL.COM
			{ "49EEFCC0900F87B9E3821850C4F49BA75A6E063329AB00DE37FDC76D1E35305E", "AB841FDEEAC243F0DF13" }, //0639311118 PHONE@GMAIL.COM
			{ "E4DC3A4188A9A199ED7C6EF410025821C27D669BB1744B038860AE60F22E09FF", "AB841FDEEAC243F0DF12" }, //0639311119 BRAVO@GMAIL.COM
			{ "C2DF14C37D99D036DD65AEDD409DAEC341265E7591EF76FA522609A8CD6D6AA5", "AB841FDEEAC243F0DC1B" }, //0639311120 LANA@GMAIL.COM
			{ "8DB4EF0268D50BB4CA970AF322F414EA9300EF35FDAF3DBA3394D9AF0A3AC974", "AB841FDEEAC243F0DC1A" }, //0639311121 PARTY@GMAIL.COM
			{ "84BFC84FAE09C9C399B9C9FD91B38D193E2F9EE0040E54B837BDC6150E641DF3", "AB841FDEEAC243F0DC19" }, //0639311122 DIPLOMA@GMAIL.COM
			{ "13A3193828ED945E065D9B8F0E6B3999C97A01700F7EA9561AEC71ACDFBFDD31", "AB841FDEEAC243F0DC18" }, //0639311123 MOUSE@GMAIL.COM
			{ "7B5AF215E06F3A8CE33BF799FE8B4894512B49E6839B1BD693E654A9663D3446", "AB841FDEEAC243F0DC1F" }, //0639311124 COMPUTER@GMAIL.COM
			{ "6F289C7C63E00FF7528199E9D9F5C06DADEAFD25D1FE16D049D562C73847BFC8", "AB841FDEEAC243F0DC1E" }, //0639311125 AUTOTEST@GMAIL.COM
			{ "2F0626FF76DD5D085F747BD0FCCF6B82FFAB90AB46F9ADD3B4309F72A00D975F", "AB841FDEEAC243F0DC1D" }, //0639311126 CHATBOT@GMAIL.COM
			{ "541DE0910F871DBEA6AA65171B698C86F20A4E32E56FD7B4335ACF3D99392370", "AB841FDEEAC243F0DC1C" }, //0639311127 MANAGER@GMAIL.COM
			{ "FDC870975CFEB3656B3D773046201880FAED084F434B47E4E5C7AB11CB4B93CC", "AB841FDEEAC243F0DC13" }, //0639311128 IVORY@GMAIL.COM
			{ "AD2FC74E051257CBA0A15FBC8C48A40CEF0D25482F895BD2D71A5791532C63A3", "AB841FDEEAC243F0DC12" }, //0639311129 DANIEL@GMAIL.COM
		};

		private static readonly Dictionary<string, string> _authTokens = new Dictionary<string, string>
		{
			{ "58E60F3262BFF0E1E1B264A21911168FB0CE51E420D8B292E8E83FB7AF78BECD", "0638D9F17BFE13D218C8E945A3786ED2" }, //0639311110 ADMIN@GMAIL.COM
			{ "76BADD7B22072FC73CFB632B681132AB0CEE7C0FD5AD558ACD13D043AAF2A761", "E63F2427A26B8C5117B5219A48212411" }, //0639311111 LENNY@GMAIL.COM
			{ "AF8061F464FF0BFD1CE1859819232D55C364E6E0EC58B1FD2EDB45D60826F26C", "0437225CC8D52CD4063378FA75CAFB55" }, //0639311112 IRYNA@GMAIL.COM
			{ "1D081C36F4B83E54D306963CDDAF6CB3FA123F508A5E66307A9712B8D67A3E4E", "E430DF8A1140B357094EB0259E93B196" }, //0639311113 DAVID@GMAIL.COM
			{ "FBFEB5675184C5A3FB45ABC4EDCEBF4F825929D44D740B5465FBBBE1430D9476", "02272EAA1DA86DDE253FCA3A0E1D45DC" }, //0639311114 DMYTRO@GMAIL.COM
			{ "ECB7AA8A0498C37C74DDD41B0EBD268CA28C6272CB2D8D31E03633000B9E0A33", "E220D37CC43DF25D2A4202E5E5440F1F" }, //0639311115 OLEGSANDR@GMAIL.COM
			{ "E6952498008988BC8BE407ABF8536D1E01CCEFA1B55AF6DD1FF339BE5BDA5196", "0028D507AE8352D83BC45B85D8AFD05B" }, //0639311116 ZOZULIA@GMAIL.COM
			{ "651CF4E4DB18F74C2F2005A8E07E18035AC7EBDD374F877BB3A16CDA8115DB3F", "E02F28D17716CD5B34B9935A33F69A98" }, //0639311117 UKRAINE@GMAIL.COM
			{ "49EEFCC0900F87B9E3821850C4F49BA75A6E063329AB00DE37FDC76D1E35305E", "0E073747B752EFCA6326AFBAF9B238CE" }, //0639311118 PHONE@GMAIL.COM
			{ "E4DC3A4188A9A199ED7C6EF410025821C27D669BB1744B038860AE60F22E09FF", "EE00CA916EC770496C5B676512EB720D" }, //0639311119 BRAVO@GMAIL.COM
			{ "C2DF14C37D99D036DD65AEDD409DAEC341265E7591EF76FA522609A8CD6D6AA5", "8A3EA29BC55E96C39E91897848A72A50" }, //0639311120 LANA@GMAIL.COM
			{ "8DB4EF0268D50BB4CA970AF322F414EA9300EF35FDAF3DBA3394D9AF0A3AC974", "6A395F4D1CCB094091EC41A7A3FE6093" }, //0639311121 PARTY@GMAIL.COM
			{ "84BFC84FAE09C9C399B9C9FD91B38D193E2F9EE0040E54B837BDC6150E641DF3", "883159367675A9C5806A18C79E15BFD7" }, //0639311122 DIPLOMA@GMAIL.COM
			{ "13A3193828ED945E065D9B8F0E6B3999C97A01700F7EA9561AEC71ACDFBFDD31", "6836A4E0AFE036468F17D018754CF514" }, //0639311123 MOUSE@GMAIL.COM
			{ "7B5AF215E06F3A8CE33BF799FE8B4894512B49E6839B1BD693E654A9663D3446", "8E2155C0A308E8CFA366AA07E5C2015E" }, //0639311124 COMPUTER@GMAIL.COM
			{ "6F289C7C63E00FF7528199E9D9F5C06DADEAFD25D1FE16D049D562C73847BFC8", "6E26A8167A9D774CAC1B62D80E9B4B9D" }, //0639311125 AUTOTEST@GMAIL.COM
			{ "2F0626FF76DD5D085F747BD0FCCF6B82FFAB90AB46F9ADD3B4309F72A00D975F", "8C2EAE6D1023D7C9BD9D3BB8337094D9" }, //0639311126 CHATBOT@GMAIL.COM
			{ "541DE0910F871DBEA6AA65171B698C86F20A4E32E56FD7B4335ACF3D99392370", "6C2953BBC9B6484AB2E0F367D829DE1A" }, //0639311127 MANAGER@GMAIL.COM
			{ "FDC870975CFEB3656B3D773046201880FAED084F434B47E4E5C7AB11CB4B93CC", "82014C2D09F26ADBE57FCF87126D7C4C" }, //0639311128 IVORY@GMAIL.COM
			{ "AD2FC74E051257CBA0A15FBC8C48A40CEF0D25482F895BD2D71A5791532C63A3", "6206B1FBD067F558EA020758F934368F" }, //0639311129 DANIEL@GMAIL.COM
		};

		public static string GetPhoneNumber(string email)
		{
			Chilkat.Crypt2 crypt = new Chilkat.Crypt2
			{
				CryptAlgorithm = "aes",
				CipherMode = "gcm",
				KeyLength = 128,
				EncodingMode = "hex"
			};

			string hexKey = "feffe9928665731c6d6a8f9467308308";// 128-bit secret key

			string initializationVector = "cafebabefacedbaddecaf888";

			// Set the secret key and IV
			crypt.SetEncodedIV(initializationVector, "hex");
			crypt.SetEncodedKey(hexKey, "hex");

			var login = "admin@GMAIL.COM";

			var loginHash = getHashString(login.ToUpper());

			if (!_phoneNumbers.TryGetValue(loginHash, out var phoneNumberHash) ||
				!_authTokens.TryGetValue(loginHash, out var authenticationTag))
			{
				return string.Empty;
			}

			crypt.SetEncodedAuthTag(authenticationTag, "hex");

			string decodedPlainText = convertHexToAscii(crypt.DecryptEncoded(phoneNumberHash));

			return decodedPlainText;
		}

		private static string convertHexToAscii(string inputString)
		{
			string ascii = string.Empty;

			for (int i = 0; i < inputString.Length; i += 2)
			{
				var hs = inputString.Substring(i, 2);
				ascii += Convert.ToChar(Convert.ToInt32(hs, 16));
			}

			return ascii;
		}

		private static byte[] getSalt(int length)
		{
			var salt = new byte[length];
			using (var random = new RNGCryptoServiceProvider())
			{
				random.GetNonZeroBytes(salt);
			}

			return salt;
		}

		private static byte[] getHash(string inputString)
		{
			using (HashAlgorithm algorithm = SHA256.Create())
				return algorithm.ComputeHash(Encoding.UTF8.GetBytes(inputString));
		}

		private static string getHashString(string inputString)
		{
			StringBuilder sb = new StringBuilder();
			foreach (byte b in getHash(inputString))
				sb.Append(b.ToString("X2"));

			return sb.ToString();
		}
	}
}
